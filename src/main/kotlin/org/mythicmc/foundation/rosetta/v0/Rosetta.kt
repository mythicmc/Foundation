package org.mythicmc.foundation.rosetta.v0

import net.kyori.adventure.text.Component
import net.kyori.adventure.text.format.NamedTextColor
import net.kyori.adventure.text.format.TextColor
import net.kyori.adventure.text.minimessage.MiniMessage
import net.kyori.adventure.text.minimessage.tag.Tag
import net.kyori.adventure.text.minimessage.tag.resolver.TagResolver
import org.mythicmc.foundation.platform.v0.Platform
import java.util.EnumMap

/**
 * This object provides functions to retrieve message prefixes, which are prefixes common to all
 * system messages generated by server plugins, as well as the colour scheme for various types of
 * system messages defined in [MessageType].
 *
 * The colour scheme and prefix formats are configurable in the `rosetta-v0/prefix.yml` file, stored
 * in the Foundation plugin's data folder.
 */
object Rosetta {
    /**
     * Uses [Rosetta.prefix] to resolve Adventure MiniMessage tags in the following formats:
     * - `<prefix:[MessageType]>`
     * - `<prefix:[MessageType]:header_content>`
     * - `<prefix:color:header_content>`
     */
    val PREFIX_TAG_RESOLVER = TagResolver.resolver("prefix") { queue, context ->
        val typeOrColor = queue.popOr(
            "<red><bold>Internal Error:</bold> A prefix MUST have either have a type or color + content!")
        Tag.inserting(Component.text("FIXME")) // FIXME
    }

    private lateinit var PREFIX: String
    private val COLOR_SCHEME = EnumMap<MessageType, TextColor>(MessageType::class.java)

    internal fun loadPrefixYml(platform: Platform) {
        // FIXME: Save default prefix.yml
    }

    private fun parseColor(color: String): TextColor? =
        NamedTextColor.NAMES.value(color.uppercase()) ?: TextColor.fromHexString(color)

    /**
     * FIXME
     */
    fun prefix(type: MessageType) {
        TODO()
    }

    /**
     * FIXME
     */
    fun prefix(type: MessageType, content: String) {
        TODO()
    }

    /**
     * FIXME
     */
    fun prefix(type: MessageType, content: Component) {
        TODO()
    }

    /**
     * FIXME
     */
    fun prefix(color: TextColor, content: String): Component {
        return prefix(color, MiniMessage.miniMessage().deserialize(content))
    }

    /**
     * FIXME
     */
    fun prefix(color: TextColor, content: Component): Component {
        TODO()
    }

    // FIXME: legacyPrefix and rawPrefix equivalents
}
